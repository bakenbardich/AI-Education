# -*- coding: utf-8 -*-
"""eda1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iIY7KVkBp4GpDmE38VBE1fN4Qa-n-Sg_

#  __РАЗВЕДОЧНЫЙ АНАЛИЗ И ПРЕДОБРАБОТКА ДАННЫХ, СОДЕРЖАЩИХ ИНФОРМАЦИЮ О КЛИЕНТАХ БАНКА__

## Импортируем необходимые библиотеки и загружаем данные ##
"""

import pandas as pd
import plotly.express as px


df_clients = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_clients.csv')
df_close_loan = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_close_loan.csv')
df_job = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_job.csv')
df_last_credit = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_last_credit.csv')
df_loan = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_loan.csv')
df_pens = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_pens.csv')
df_salary = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_salary.csv')
df_target = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_target.csv')
df_work = pd.read_csv('https://raw.githubusercontent.com/bakenbardich/AI-Education/main/Linear_Models/Bank/DATA/D_work.csv')

"""## Мерджим данные в один датафрейм ##

За основу хочу взять df_target, так как в ней находиться целевая переменная.
К данному датафрейму присоединяем остальные.
Так как данный сет будет взять за основу, предлагаю сразу проверить его на пропущенные значения и дубликаты.
"""

df_target.info()

df_target['AGREEMENT_RK'].nunique() == len(df_target)

df_merge = df_target.merge(df_clients, left_on='ID_CLIENT', right_on='ID', how='left'). \
    merge(df_job, on='ID_CLIENT', how='left'). \
    merge(df_salary, on='ID_CLIENT', how='left'). \
    merge(df_last_credit, on='ID_CLIENT', how='left'). \
    merge(df_loan, on='ID_CLIENT', how='left'). \
    merge(df_close_loan, on='ID_LOAN', how='left'). \
    merge(df_work, left_on='SOCSTATUS_WORK_FL', right_on='FLAG', how='left'). \
    merge(df_pens, left_on='SOCSTATUS_PENS_FL', right_on='FLAG', how='left')

df_merge.head()

"""## Предобработка данных ##"""

df_merge.duplicated().sum()

"""После слияния образовалось 409 полных дубликатов.
Удалим их.
"""

df_merge.drop_duplicates(inplace=True)

df_merge

"""После удаления дубликатов на основании колонки AGREEMENT_RK покажется, что какие-то остались, но это клиенты у которых какие-то(ID_LOAN, CLOSED_FL) кредиты закрыты,а какие-то нет.
Давайте это исправим, посчитав две новых колонки LOAN_NUM_TOTAL — количество ссуд клиента;LOAN_NUM_CLOSED — количество погашенных ссуд клиента.
"""

df_merge = df_merge.merge(df_merge.groupby('AGREEMENT_RK'). \
                          agg({'ID_LOAN': 'nunique', 'CLOSED_FL': 'sum'}). \
                          rename(columns={'ID_LOAN': 'LOAN_NUM_TOTAL', 'CLOSED_FL': 'LOAN_NUM_CLOSED'}),
                          on='AGREEMENT_RK', how='left')

"""Возмем из датасета после агрегации только те колонки, которые указаны в задании, потом еще раз удалим дубликаты.
PS:
Думал какие еще фичи можно добавить в итоговый датасет, помимо тех которые указаны в минимальном наборе, учитывая тот факт, что в дальнейшем будет стоять задача классификации склонности клиента на предложения банка, более ничего в голову не пришло.
Вот была бы задача кредитного скоринга, добавил бы еще несколько фичей =)
"""

df_final = df_merge[
    ['AGREEMENT_RK', 'AGE', 'GENDER', 'CHILD_TOTAL', 'DEPENDANTS', 'SOCSTATUS_WORK_FL', 'SOCSTATUS_PENS_FL',
     'PERSONAL_INCOME', 'LOAN_NUM_TOTAL', 'LOAN_NUM_CLOSED', 'TARGET']].drop_duplicates()

"""Сопоставим на всякий случай количество объектов в финальном сете с количеством df_target."""

df_final['AGREEMENT_RK'].nunique() == len(df_target)

"""Итак, мы сформировали финальный датасет для нашего дальнейшего исследования.
Поехали далее =)

##  __EDA__ ##

Вычислим числовые характеристики фичей.
"""

df_final

df_final.iloc[:, 1:].describe()

"""Графики распределения числовых признаков(не менее двух) и зависимости этих признаков от таргета."""

# Возраст клиентов
fig_age = px.histogram(df_final, x='AGE', color='TARGET', barmode='group', width=1200,
                       height=800, color_discrete_sequence=['aqua', 'yellow'], nbins=30)
fig_age.update_layout(plot_bgcolor='purple')
mean_age = df_final['AGE'].mean()
min_age = df_final['AGE'].min()
max_age = df_final['AGE'].max()
med_age = df_final['AGE'].median()
mod_age = df_final['AGE'].mode()[0]

# Персональный доход клиентов
fig_personal_income = px.histogram(df_final, x='PERSONAL_INCOME', color='TARGET', barmode='group',
                                   width=1200, height=800,
                                   color_discrete_sequence=['aqua', 'yellow'], nbins=30)
fig_personal_income.update_layout(plot_bgcolor='purple')
mean_in = df_final['PERSONAL_INCOME'].mean()
min_in = df_final['PERSONAL_INCOME'].min()
max_in = df_final['PERSONAL_INCOME'].max()
med_in = df_final['PERSONAL_INCOME'].median()
mod_in = df_final['PERSONAL_INCOME'].mode()
# Кол-во детей клиентов
fig_child = px.histogram(df_final, x='CHILD_TOTAL', color='TARGET', barmode='group',
                         width=1200, height=800,
                         color_discrete_sequence=['aqua', 'yellow'], nbins=30)
fig_child.update_layout(plot_bgcolor='purple')
mean_ch = df_final['CHILD_TOTAL'].mean()
min_ch = df_final['CHILD_TOTAL'].min()
max_ch = df_final['CHILD_TOTAL'].max()
med_ch = df_final['CHILD_TOTAL'].median()
mod_ch = df_final['CHILD_TOTAL'].mode()

"""Матрица корреляций"""
cor = px.imshow(df_final.corr(), width=1200, height=800, color_continuous_scale='viridis')

"""Категориальные признаки"""
df_cat = df_merge[['ID_CLIENT', 'GENDER',
                   'EDUCATION', 'MARITAL_STATUS',
                   'COMMENT_x', 'COMMENT_y',
                   'GEN_INDUSTRY', 'GEN_TITLE']].drop_duplicates()
cat1 = px.histogram(df_cat, x=['EDUCATION', 'MARITAL_STATUS',
                               'COMMENT_x', 'COMMENT_y'],width=1200, height=800,
                    color_discrete_sequence=['aqua', 'yellow','blue','green'], nbins=30)
cat1.update_layout(plot_bgcolor='purple')

cat2 = px.histogram(df_cat, x=['GEN_INDUSTRY', 'GEN_TITLE'],width=1200, height=800,
                    color_discrete_sequence=['aqua', 'yellow'], nbins=22)

cat2.update_layout(plot_bgcolor='purple')
cat3 = px.bar(df_final['GENDER'].value_counts(),width=1200, height=800,
              color_discrete_sequence=['aqua', 'yellow'])
cat3.update_layout(plot_bgcolor='purple')


